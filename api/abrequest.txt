import requests
import os
import logging
import uuid
from typing import Optional, Dict, Any

# 配置日志
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s]: %(message)s")
logger = logging.getLogger(__name__)

# 配置
login_url = "http://28.4.136.142/api/auth/login"
target_url = "http://28.4.136.142/api/target_endpoint"
session_file = "sessionid.txt"
username = os.getenv("USERNAME", "your_username")
password = os.getenv("PASSWORD", "your_password")


class SessionManager:
    def __init__(self, login_url: str, session_file: str):
        self.login_url = login_url
        self.session_file = session_file

    def save_sessionid(self, sessionid: str) -> None:
        """保存 sessionid 到文件"""
        with open(self.session_file, "w") as f:
            f.write(sessionid)
        logger.info(f"Session ID 已保存到文件: {self.session_file}")

    def load_sessionid(self) -> Optional[str]:
        """从文件加载 sessionid"""
        if os.path.exists(self.session_file):
            with open(self.session_file, "r") as f:
                sessionid = f.read().strip()
                logger.info(f"从文件加载 Session ID: {sessionid}")
                return sessionid
        logger.warning("Session 文件不存在，需要重新登录")
        return None

    def login(self) -> Optional[str]:
        """登录系统并获取 sessionid"""
        try:
            response = requests.post(self.login_url, json={"username": username, "password": password})
            if response.status_code == 200:
                sessionid = response.cookies.get("sessionid")
                if sessionid:
                    logger.info(f"登录成功，Session ID: {sessionid}")
                    self.save_sessionid(sessionid)
                    return sessionid
                else:
                    logger.warning("登录成功，但未找到 Session ID")
            else:
                logger.error(f"登录失败，状态码: {response.status_code}, 响应: {response.text}")
        except requests.RequestException as e:
            logger.error(f"登录请求异常: {e}")
        return None

    def validate_session(self, sessionid: str, test_url: str) -> bool:
        """验证 sessionid 是否有效"""
        try:
            headers = {"Cookie": f"sessionid={sessionid}"}
            response = requests.get(test_url, headers=headers)
            if response.status_code == 200:
                logger.info("Session ID 有效")
                return True
            elif response.status_code == 401:
                logger.warning("Session ID 已失效")
                return False
            else:
                logger.error(f"验证 Session ID 失败，状态码: {response.status_code}")
        except requests.RequestException as e:
            logger.error(f"验证 Session ID 请求异常: {e}")
        return False

    def get_valid_session(self, test_url: str) -> Optional[str]:
        """获取有效的 sessionid"""
        sessionid = self.load_sessionid()
        if sessionid and self.validate_session(sessionid, test_url):
            return sessionid
        logger.warning("Session ID 无效或不存在，尝试重新登录")
        return self.login()


def fetch_data(url: str, params: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
    """使用有效的 Session ID 获取数据"""
    session_manager = SessionManager(login_url, session_file)
    sessionid = session_manager.get_valid_session(target_url)
    if not sessionid:
        logger.error("无法获取有效的 Session ID")
        return None

    headers = {"Cookie": f"sessionid={sessionid}"}
    try:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            logger.info("数据请求成功")
            return response.json()
        else:
            logger.error(f"数据请求失败，状态码: {response.status_code}, 响应: {response.text}")
    except requests.RequestException as e:
        logger.error(f"请求异常: {e}")
    return None


def post_data_with_session(url: str, data: Optional[Dict[str, Any]] = None, json_data: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
    """使用有效的 Session ID 发送 POST 请求"""
    session_manager = SessionManager(login_url, session_file)
    sessionid = session_manager.get_valid_session(target_url)
    if not sessionid:
        logger.error("无法获取有效的 Session ID")
        return None

    headers = {"Cookie": f"sessionid={sessionid}"}
    if json_data:
        headers["Content-Type"] = "application/json"

    try:
        response = requests.post(url, headers=headers, data=data, json=json_data)
        if response.status_code == 200:
            logger.info("数据提交成功")
            return response.json()
        else:
            logger.error(f"数据提交失败，状态码: {response.status_code}, 响应: {response.text}")
    except requests.RequestException as e:
        logger.error(f"请求异常: {e}")
    return None


def create_experiment(flight_name: str, duration: int, hash_strategy: str, app_id: int) -> Optional[Dict[str, Any]]:
    """
    创建实验的完整流程，包含四次连续的 POST 请求
    """
    try:
        # Step 1: 初始化实验草稿
        step1_url = "http://28.4.136.142/api/step1"
        step1_payload = {
            "flight_name": flight_name,
            "duration": duration,
            "hash_strategy": hash_strategy,
            "expiration_remind": True,
            "longrun_remind": True,
            "report_mode": 0,
            "mode": 1,
            "app": app_id
        }
        step1_response = post_data_with_session(step1_url, json_data=step1_payload)
        if not step1_response:
            logger.error("❌ 第一步请求失败")
            return None
        draft_id = step1_response.get("draft_id")

        # Step 2: 配置实验指标
        step2_url = "http://28.4.136.142/api/step2"
        step2_payload = {
            "major_metric": "1545",
            "metrics": "1545",
            "app": app_id,
            "draft_id": draft_id
        }
        post_data_with_session(step2_url, json_data=step2_payload)

        # Step 3: 配置实验版本
        version_control_id = str(uuid.uuid4())
        version_experiment_id = str(uuid.uuid4())
        step3_url = "http://28.4.136.142/api/step3"
        step3_payload = {
            "versions": [
                {"type": 0, "id": version_control_id, "label": "对照版本", "weight": 50},
                {"type": 1, "id": version_experiment_id, "label": "实验版本", "weight": 50},
            ],
            "app": app_id,
            "draft_id": draft_id
        }
        post_data_with_session(step3_url, json_data=step3_payload)

        # Step 4: 提交实验草稿
        step4_url = "http://28.4.136.142/api/step4"
        step4_payload = {
            "skip_verificationh": False,
            "is_start": True,
            "distribute": True,
            "versions": [
                {"type": 0, "id": version_control_id, "label": "对照版本", "weight": 50},
                {"type": 1, "id": version_experiment_id, "label": "实验版本", "weight": 50},
            ],
            "app": app_id,
            "draft_id": draft_id,
        }
        return post_data_with_session(step4_url, json_data=step4_payload)
    except Exception as e:
        logger.error(f"实验创建异常: {e}")
        return None


if __name__ == "__main__":
    experiment_result = create_experiment("abtest1", 7, "ssid", 10000305)
    if experiment_result:
        logger.info(f"实验创建成功: {experiment_result}")
    else:
        logger.error("实验创建失败")